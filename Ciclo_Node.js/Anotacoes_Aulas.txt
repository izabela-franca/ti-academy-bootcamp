----------* Aula 1 * ----------

- MVC : Model, View, Controller	
	- View: front-end;
	- Controller: onde ficam todas os serviços/ ações disponibilizados pelo sistema;
	- Model: onde ficam as classes do sistema;

- Quando o cliente está em uma tecla e clica em um botão, esse botão chama o Controller. O Controller tem a capacidade de pegar todos os dados na tela e passar para a camada de Modelo. O Modelo, por sua vez, tem a funcionalida de armazenar esses dados para que possam ser usados em uma pro´xoma vez. 

- A camadas são independentes, mas interagem entre si.

- Models:
	- São as classes necessárias para o sistema, por exemplo: Clientes, Pedidos, Serviços e ItemPedido.
	- Essas classes terão associações:
		- 1; 1..*; 0..*;
		- Toda vez que temos associações de MUITOS (*) para MUITOS(*), devemos criar uma classe associativa.


----------* Aula 2 * ----------

- Express: framework para aplicações web o qual permite que trabalhemos com rotas.
- Cors: permite a troca de informações entre as camadas de View, Model e Controller.
- Sequelize: necessário para utilizar Banco de Dados. Faz o mapeamento do nosso Banco de Dados.
- Sequelize Cli: permite que façamos as migrações dos dados.

- Para criar uma base de dados precisamos ter nosso servidor (Xammp; Wamserver) rodando.

- Devemos criar um modelo e depois migrá-lo para o Banco de Dados.
- Criamos as classes a partir do comando: npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string.
- E alteramos os dados necessários a partir do modelo criado.


----------* Aula 3 * ----------

- Associações:
	- hasOne: tem apenas uma ocorrência (1 para 1);
	- belongsTo: um pertence ao outro;
	- hasMany: tem uma ou muitas ocorrências;
	- belongsToMany: pertence a muitos (muitos para muitos) -> Cria-se uma terceira classe;
	

----------* Aula 4 * ----------

- Chave primária: é um atributo que irá permitir que exista apenas um registro na base de dados.
- Chave estrangeira: é uma referência em uma tabela a uma chave primária de outra tabela.
- Sempre que tivermos um relacionamento de UM para MUITOS, o atributo chave primária precisa ir para outra tabela como chave estrangeira.
- Sempre que tivermos um item de associação, a chave primária será composta pelas chaves primárias das duas tabelas que resultaram sua existência.


----------* Aula 5 * ----------

- CRUD: Create, Retrieve, Update e Delete.
- A troca de informação entre o MVC acontece através do formato de arquivo JSON.
- Escreveremos nosso código dentro do arquivo Controller.js.
- Toda parte inicial para se criar o Controller pode ser encontrada na documentação do express.


----------* Aula 7 * ----------

- Métodos:
	- GET para consultas;
	- POST para inserções;
	- PUT para alterações;
	- DELETE para exclusões;
	
- Postman é uma plataforma de API para desenvolvedores projetar, construir, testar e iterar suas APIs.
	- A partir dele podemos fazer as requisições no próprio corpo do programa;
	- Colocando o url do localhost, a API 


----------* Aula 8 * ----------

- classe.findALL('campo'): retorna todos os dados da classe.
- classe.findByPk(req.params.campo): pesquisa a partir da Primart Key e retorna os dados.
- classe.count('campo'): retorna a quantidade de ocorrências.


----------* Aula 9 * ----------

- order: [['campo', 'DESC / ASC']]: retorna a consulta em forma decrescente ou crescente.


----------* Aula 10 * ----------

- paramFuncao.campo = 'HTML/CSS/JS': Estrturada utilizada para realizar a alteração de um campo. Sempre devemos colocar a alteração em aspas simples.
- Após feitas as alterações, devemos chamar a função serv.save() para que tudo possa ser salvo antes de retornas o json.


----------* Aula 11 * ----------

- Método put: é uma mistura dos métodos GET(obtém os dados) e POST(atualizada os dados).
- classe.update(): para realizar a atualição através de uma requisição externa.


----------* Aula 12 * ----------